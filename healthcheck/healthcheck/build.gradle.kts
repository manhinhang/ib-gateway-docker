import org.gradle.wrapper.Download

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.7/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.jvm)
    id("de.undercouch.download") version "5.6.0"
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation(libs.guava)
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.1-Beta")
}

val downloadIbApiTask = tasks.register<org.jetbrains.kotlin.de.undercouch.gradle.tasks.download.Download>("downloadIbApi") {
    onlyIf("ibapi.zip not found") {
        !File("${layout.buildDirectory.asFile.get().path}/ibapi.zip").exists()
    }
    src("https://interactivebrokers.github.io/downloads/twsapi_macunix.1019.04.zip")
    dest("${layout.buildDirectory.asFile.get().path}/ibapi.zip")
}

val unzipIbApiTask = tasks.register<Copy>("unzipIbApi") {
    from(zipTree("${layout.buildDirectory.asFile.get().path}/ibapi.zip")) {
        include("IBJts/source/JavaClient/com/**")
        eachFile {
            relativePath = RelativePath(true, *relativePath.segments.drop(3).toTypedArray())
        }
        includeEmptyDirs = false
    }
    into("${projectDir}/src/main/java")
}
unzipIbApiTask { dependsOn(downloadIbApiTask) }
tasks.compileKotlin { dependsOn(unzipIbApiTask) }

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use Kotlin Test test framework
            useKotlinTest("1.9.22")
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = "com.manhinhang.ibgatewaydocker.healthcheck.AppKt"
}
